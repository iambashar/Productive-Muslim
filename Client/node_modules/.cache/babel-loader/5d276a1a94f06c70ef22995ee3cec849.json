{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\nconst name = \"@firebase/remote-config\";\nconst version = \"0.3.1\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\nclass RemoteConfigAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst RC_COMPONENT_NAME = 'remote-config';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"registration-window\"\n  /* REGISTRATION_WINDOW */\n  ]: 'Undefined window object. This SDK only supports usage in a browser environment.',\n  [\"registration-project-id\"\n  /* REGISTRATION_PROJECT_ID */\n  ]: 'Undefined project identifier. Check Firebase app initialization.',\n  [\"registration-api-key\"\n  /* REGISTRATION_API_KEY */\n  ]: 'Undefined API key. Check Firebase app initialization.',\n  [\"registration-app-id\"\n  /* REGISTRATION_APP_ID */\n  ]: 'Undefined app identifier. Check Firebase app initialization.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_SET */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"storage-delete\"\n  /* STORAGE_DELETE */\n  ]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [\"fetch-client-network\"\n  /* FETCH_NETWORK */\n  ]: 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-timeout\"\n  /* FETCH_TIMEOUT */\n  ]: 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [\"fetch-throttle\"\n  /* FETCH_THROTTLE */\n  ]: 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"fetch-client-parse\"\n  /* FETCH_PARSE */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status\"\n  /* FETCH_STATUS */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"indexed-db-unavailable\"\n  /* INDEXED_DB_UNAVAILABLE */\n  ]: 'Indexed DB is not supported by current browser'\n};\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig'\n/* service */\n, 'Remote Config'\n/* service name */\n, ERROR_DESCRIPTION_MAP); // Note how this is like typeof/instanceof, but for ErrorCode.\n\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nclass Value {\n  constructor(_source) {\n    let _value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_VALUE_FOR_STRING;\n\n    this._source = _source;\n    this._value = _value;\n  }\n\n  asString() {\n    return this._value;\n  }\n\n  asBoolean() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber() {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n\n    let num = Number(this._value);\n\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n\n    return num;\n  }\n\n  getSource() {\n    return this._source;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getRemoteConfig() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n\n  return rcProvider.getImmediate();\n}\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nasync function activate(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);\n\n  if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n\n  await Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);\n  return true;\n}\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\n\n\nfunction ensureInitialized(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n\n  return rc._initializePromise;\n}\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\n\n\nasync function fetchConfig(remoteConfig) {\n  const rc = getModularInstance(remoteConfig); // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n\n  const abortSignal = new RemoteConfigAbortSignal();\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis); // Catches *all* errors thrown by client so status can be set consistently.\n\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\"\n    /* FETCH_THROTTLE */\n    ) ? 'throttle' : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\n\n\nfunction getAll(remoteConfig) {\n  const rc = getModularInstance(remoteConfig);\n  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {});\n}\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\n\n\nfunction getBoolean(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\n\n\nfunction getNumber(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\n\n\nfunction getString(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\n\n\nfunction getValue(remoteConfig, key) {\n  const rc = getModularInstance(remoteConfig);\n\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n  }\n\n  const activeConfig = rc._storageCache.getActiveConfig();\n\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new Value('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new Value('default', String(rc.defaultConfig[key]));\n  }\n\n  rc._logger.debug(`Returning static value for key \"${key}\".` + ' Define a default or remote value if this is unintentional.');\n\n  return new Value('static');\n}\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(remoteConfig, logLevel) {\n  const rc = getModularInstance(remoteConfig);\n\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = LogLevel.DEBUG;\n      break;\n\n    case 'silent':\n      rc._logger.logLevel = LogLevel.SILENT;\n      break;\n\n    default:\n      rc._logger.logLevel = LogLevel.ERROR;\n  }\n}\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\n\n\nfunction getAllKeys() {\n  let obj1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let obj2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\n\n\nclass CachingClient {\n  constructor(client, storage, storageCache, logger) {\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n\n\n  isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    } // Calculates age of cache entry.\n\n\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n    this.logger.debug('Config fetch cache check.' + ` Cache age millis: ${cacheAgeMillis}.` + ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` + ` Is cache hit: ${isCachedDataFresh}.`);\n    return isCachedDataFresh;\n  }\n\n  async fetch(request) {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()]); // Exits early on cache hit.\n\n    if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n      return lastSuccessfulFetchResponse;\n    } // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n\n\n    request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag; // Falls back to service on cache miss.\n\n    const response = await this.client.fetch(request); // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [// Uses write-through cache for consistency with synchronous public API.\n    this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n    }\n\n    await Promise.all(storageOperations);\n    return response;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\n\n\nfunction getUserLanguage() {\n  let navigatorLanguage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator;\n  return (// Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language // Polyfill otherwise.\n\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\n\n\nclass RestClient {\n  constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n\n\n  async fetch(request) {\n    const [installationId, installationToken] = await Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()]);\n    const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n    const requestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n\n    };\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    }; // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n    let response;\n\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = \"fetch-client-network\"\n      /* FETCH_NETWORK */\n      ;\n\n      if (originalError.name === 'AbortError') {\n        errorCode = \"fetch-timeout\"\n        /* FETCH_TIMEOUT */\n        ;\n      }\n\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status; // Normalizes nullable header to optional.\n\n    const responseEtag = response.headers.get('ETag') || undefined;\n    let config;\n    let state; // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n\n    if (response.status === 200) {\n      let responseBody;\n\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(\"fetch-client-parse\"\n        /* FETCH_PARSE */\n        , {\n          originalErrorMessage: originalError.message\n        });\n      }\n\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    } // Normalizes based on legacy state.\n\n\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    } // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n\n\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(\"fetch-status\"\n      /* FETCH_STATUS */\n      , {\n        httpStatus: status\n      });\n    }\n\n    return {\n      status,\n      eTag: responseEtag,\n      config\n    };\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(() => {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\n\n\nclass RetryingClient {\n  constructor(client, storage) {\n    this.client = client;\n    this.storage = storage;\n  }\n\n  async fetch(request) {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n    return this.attemptFetch(request, throttleMetadata);\n  }\n  /**\r\n   * A recursive helper for attempting a fetch request repeatedly.\r\n   *\r\n   * @throws any non-retriable errors.\r\n   */\n\n\n  async attemptFetch(request, _ref) {\n    let {\n      throttleEndTimeMillis,\n      backoffCount\n    } = _ref;\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n      await this.storage.deleteThrottleMetadata();\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      } // Increments backoff state.\n\n\n      const throttleMetadata = {\n        throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      }; // Persists state.\n\n      await this.storage.setThrottleMetadata(throttleMetadata);\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\n\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\n\nclass RemoteConfig {\n  constructor( // Required by FirebaseServiceFactory interface.\n  app, // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n\n  /**\r\n   * @internal\r\n   */\n  _client,\n  /**\r\n   * @internal\r\n   */\n  _storageCache,\n  /**\r\n   * @internal\r\n   */\n  _storage,\n  /**\r\n   * @internal\r\n   */\n  _logger) {\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    /**\r\n     * Tracks completion of initialization promise.\r\n     * @internal\r\n     */\n\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n\n  get fetchTimeMillis() {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus() {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\n\n\nfunction toFirebaseError(event, errorCode) {\n  const originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1; // Visible for testing.\n\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = event => {\n        reject(toFirebaseError(event, \"storage-open\"\n        /* STORAGE_OPEN */\n        ));\n      };\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: error\n      }));\n    }\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\n\n\nclass Storage {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  constructor(appId, appName, namespace) {\n    let openDbPromise = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : openDatabase();\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n\n  getLastFetchStatus() {\n    return this.get('last_fetch_status');\n  }\n\n  setLastFetchStatus(status) {\n    return this.set('last_fetch_status', status);\n  } // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n\n\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.get('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp) {\n    return this.set('last_successful_fetch_timestamp_millis', timestamp);\n  }\n\n  getLastSuccessfulFetchResponse() {\n    return this.get('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response) {\n    return this.set('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig() {\n    return this.get('active_config');\n  }\n\n  setActiveConfig(config) {\n    return this.set('active_config', config);\n  }\n\n  getActiveConfigEtag() {\n    return this.get('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag) {\n    return this.set('active_config_etag', etag);\n  }\n\n  getThrottleMetadata() {\n    return this.get('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata) {\n    return this.set('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata() {\n    return this.delete('throttle_metadata');\n  }\n\n  async get(key) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n\n      try {\n        const request = objectStore.get(compositeKey);\n\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-get\"\n          /* STORAGE_GET */\n          ));\n        };\n\n        request.onsuccess = event => {\n          const result = event.target.result;\n\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-get\"\n        /* STORAGE_GET */\n        , {\n          originalErrorMessage: e && e.message\n        }));\n      }\n    });\n  }\n\n  async set(key, value) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-set\"\n          /* STORAGE_SET */\n          ));\n        };\n\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-set\"\n        /* STORAGE_SET */\n        , {\n          originalErrorMessage: e && e.message\n        }));\n      }\n    });\n  }\n\n  async delete(key) {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n\n      try {\n        const request = objectStore.delete(compositeKey);\n\n        request.onerror = event => {\n          reject(toFirebaseError(event, \"storage-delete\"\n          /* STORAGE_DELETE */\n          ));\n        };\n\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(ERROR_FACTORY.create(\"storage-delete\"\n        /* STORAGE_DELETE */\n        , {\n          originalErrorMessage: e && e.message\n        }));\n      }\n    });\n  } // Facilitates composite key functionality (which is unsupported in IE).\n\n\n  createCompositeKey(key) {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\n\n\nclass StorageCache {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n\n\n  getLastFetchStatus() {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis() {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig() {\n    return this.activeConfig;\n  }\n  /**\r\n   * Read-ahead getter\r\n   */\n\n\n  async loadFromStorage() {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig(); // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n  /**\r\n   * Write-through setters\r\n   */\n\n\n  setLastFetchStatus(status) {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig) {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerRemoteConfig() {\n  _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n\n  function remoteConfigFactory(container, _ref2) {\n    let {\n      instanceIdentifier: namespace\n    } = _ref2;\n\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate(); // The following call will always succeed because rc has `import '@firebase/installations'`\n\n    const installations = container.getProvider('installations-internal').getImmediate(); // Guards against the SDK being used in non-browser environments.\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\"\n      /* REGISTRATION_WINDOW */\n      );\n    } // Guards against the SDK being used when indexedDB is not available.\n\n\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(\"indexed-db-unavailable\"\n      /* INDEXED_DB_UNAVAILABLE */\n      );\n    } // Normalizes optional inputs.\n\n\n    const {\n      projectId,\n      apiKey,\n      appId\n    } = app.options;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\"\n      /* REGISTRATION_PROJECT_ID */\n      );\n    }\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\"\n      /* REGISTRATION_API_KEY */\n      );\n    }\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\"\n      /* REGISTRATION_APP_ID */\n      );\n    }\n\n    namespace = namespace || 'firebase';\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n    const logger = new Logger(name); // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n\n    logger.logLevel = LogLevel.ERROR;\n    const restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    SDK_VERSION, namespace, projectId, apiKey, appId);\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger); // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    ensureInitialized(remoteConfigInstance);\n    return remoteConfigInstance;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nasync function fetchAndActivate(remoteConfig) {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\n\n\nasync function isSupported() {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\n\n/** register component and version */\n\n\nregisterRemoteConfig();\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };","map":{"version":3,"sources":["../src/client/remote_config_fetch_client.ts","../src/constants.ts","../src/errors.ts","../src/value.ts","../src/api.ts","../src/client/caching_client.ts","../src/language.ts","../src/client/rest_client.ts","../src/client/retrying_client.ts","../src/remote_config.ts","../src/storage/storage.ts","../src/storage/storage_cache.ts","../src/register.ts","../src/api2.ts","../src/index.ts"],"names":["ValueImpl","FirebaseLogLevel","packageName","RemoteConfigImpl"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport { RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Value as ValueImpl } from './value';\nimport { LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n * @returns A {@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig {\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) {\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n  }\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\n      rc._isInitializationComplete = true;\n    });\n  }\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n  }, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try {\n    await rc._client.fetch({\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n    });\n\n    await rc._storageCache.setLastFetchStatus('success');\n  } catch (e) {\n    const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n  }\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the {@link Value} for the given key.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\n      `A value was requested for key \"${key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n  }\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new ValueImpl('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n  }\n  rc._logger.debug(\n    `Returning static value for key \"${key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void {\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport { StorageCache } from './storage/storage_cache';\nimport { RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport { Storage } from './storage/storage';\nimport { Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) {}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n      };\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, {\n          originalErrorMessage: error\n        })\n      );\n    }\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { RemoteConfig } from './public_types';\nimport { name as packageName, version } from '../package.json';\nimport { ensureInitialized } from './api';\nimport { CachingClient } from './client/caching_client';\nimport { RestClient } from './client/rest_client';\nimport { RetryingClient } from './client/retrying_client';\nimport { RC_COMPONENT_NAME } from './constants';\nimport { ErrorCode, ERROR_FACTORY } from './errors';\nimport { RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport { Storage } from './storage/storage';\nimport { StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void {\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    { instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n    }\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RemoteConfig } from './public_types';\nimport { activate, fetchConfig } from './api';\nimport {\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The {@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> {\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n","/**\n * Firebase Remote Config\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerRemoteConfig } from './register';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport * from './api';\nexport * from './api2';\nexport * from './public_types';\n\n/** register component and version */\nregisterRemoteConfig();\n"]},"metadata":{},"sourceType":"module"}
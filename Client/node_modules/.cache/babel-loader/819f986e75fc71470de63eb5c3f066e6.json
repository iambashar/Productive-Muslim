{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, getGlobal, base64, issuedAtTime, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning() {\n    return !!this.pending;\n  }\n\n  async process(hasSucceeded) {\n    this.stop();\n\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded)); // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  }\n\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"already-initialized\"\n  /* ALREADY_INITIALIZED */\n  ]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\"\n  /* USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\"\n  /* FETCH_NETWORK_ERROR */\n  ]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\"\n  /* FETCH_PARSE_ERROR */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\"\n  /* FETCH_STATUS_ERROR */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\"\n  /* RECAPTCHA_ERROR */\n  ]: 'ReCAPTCHA error.'\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha() {\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\n\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function exchangeToken(_ref, platformLoggerProvider) {\n  let {\n    url,\n    body\n  } = _ref;\n  const headers = {\n    'Content-Type': 'application/json'\n  }; // If platform logger exists, add the platform info string to the header.\n\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\"\n    /* FETCH_NETWORK_ERROR */\n    , {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\"\n    /* FETCH_STATUS_ERROR */\n    , {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody;\n\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: originalError.message\n    });\n  } // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n\n\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-set\"\n      /* STORAGE_WRITE */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-get\"\n      /* STORAGE_GET */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n\n    return token;\n  }\n\n  return undefined;\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\r\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n   * But it won't happen here, because this function will be called exactly once.\r\n   */\n  let existingDebugToken = undefined;\n\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {// failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4(); // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nasync function getDebugToken() {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nasync function getToken$2(appCheck) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getState(app);\n  /**\r\n   * First check if there is a token in memory from a previous `getToken()` call.\r\n   */\n\n  let token = state.token;\n  let error = undefined;\n  /**\r\n   * If there is no token in memory, try to load token from indexedDB.\r\n   */\n\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n      setState(app, Object.assign(Object.assign({}, state), {\n        token\n      })); // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: token.token\n      });\n    }\n  } // Return the cached token (from either memory or indexedDB) if it's valid\n\n\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n  /**\r\n   * DEBUG MODE\r\n   * If debug mode is set, and there is no cached token, fetch a new App\r\n   * Check token using the debug token, and return it directly.\r\n   */\n\n\n  if (isDebugMode()) {\n    const tokenFromDebugExchange = await exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.platformLoggerProvider); // Write debug token to indexedDB.\n\n    await writeTokenToStorage(app, tokenFromDebugExchange); // Write debug token to state.\n\n    setState(app, Object.assign(Object.assign({}, state), {\n      token: tokenFromDebugExchange\n    }));\n    return {\n      token: tokenFromDebugExchange.token\n    };\n  }\n  /**\r\n   * request a new token\r\n   */\n\n\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult;\n\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    }; // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n\n    setState(app, Object.assign(Object.assign({}, state), {\n      token\n    }));\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = Object.assign(Object.assign({}, state), {\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  });\n  /**\r\n   * Invoke the listener with the valid token, then start the token refresher\r\n   */\n\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(appCheck);\n    newState.tokenRefresher = tokenRefresher;\n  } // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  } // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => listener({\n      token: validToken.token\n    })).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state.cachedTokenPromise // Storage token promise. Always populated in `activate()`.\n    .then(cachedToken => {\n      if (cachedToken && isValid(cachedToken)) {\n        listener({\n          token: cachedToken.token\n        });\n      }\n    }).catch(() => {\n      /** Ignore errors in listeners. */\n    });\n  }\n\n  setState(app, newState);\n}\n\nfunction removeTokenListener(app, listener) {\n  const state = getState(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher( // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getState(app); // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n\n    let result;\n\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    } // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n\n\n    if (result.error) {\n      throw result.error;\n    }\n  }, () => {\n    // TODO: when should we retry?\n    return true;\n  }, () => {\n    const state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nclass AppCheckService {\n  constructor(app, platformLoggerProvider) {\n    this.app = app;\n    this.platformLoggerProvider = platformLoggerProvider;\n  }\n\n  _delete() {\n    const {\n      tokenObservers\n    } = getState(this.app);\n\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nfunction factory(app, platformLoggerProvider) {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.4.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nfunction initialize(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  const grecaptcha = getRecaptcha();\n\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nasync function getToken$1(app) {\n  ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n  const reCAPTCHAState = getState(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  const state = getState(app);\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAScript(onload) {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: ''\n      });\n    }\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* RECAPTCHA_ERROR */\n      );\n    });\n    return exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider);\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initialize(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: ''\n      });\n    } // custom provider\n\n\n    const customToken = await this._customProviderOptions.getToken(); // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token => // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({\n    options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  const state = getState(app);\n  const newState = Object.assign(Object.assign({}, state), {\n    activated: true\n  });\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, Object.assign(Object.assign({}, getState(app)), {\n        token: cachedToken\n      }));\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return {\n    token: result.token\n  };\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n\n  let errorFn = () => {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"sources":["../src/state.ts","../src/constants.ts","../src/proactive-refresh.ts","../src/errors.ts","../src/util.ts","../src/client.ts","../src/indexeddb.ts","../src/logger.ts","../src/storage.ts","../src/debug.ts","../src/internal-api.ts","../src/factory.ts","../src/recaptcha.ts","../src/providers.ts","../src/api.ts","../src/index.ts"],"names":["getToken","getReCAPTCHAToken","initializeRecaptcha","getTokenInternal"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getState, setState } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64 } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      appCheck.platformLoggerProvider\n    );\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider!.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  };\n  /**\n   * Invoke the listener with the valid token, then start the token refresher\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(appCheck);\n    newState.tokenRefresher = tokenRefresher;\n  }\n\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => listener({ token: validToken.token }))\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state\n      .cachedTokenPromise! // Storage token promise. Always populated in `activate()`.\n      .then(cachedToken => {\n        if (cachedToken && isValid(cachedToken)) {\n          listener({ token: cachedToken.token });\n        }\n      })\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getState } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public platformLoggerProvider: Provider<'platform-logger'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): AppCheckService {\n  return new AppCheckService(app, platformLoggerProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { issuedAtTime } from '@firebase/util';\nimport { exchangeToken, getExchangeRecaptchaTokenRequest } from './client';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initialize as initializeRecaptcha\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal } from './types';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    });\n    return exchangeToken(\n      getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken),\n      this._platformLoggerProvider\n    );\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._platformLoggerProvider = _getProvider(app, 'platform-logger');\n    initializeRecaptcha(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, getDebugState } from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport { ReCaptchaV3Provider, CustomProvider } from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n\n  const newState: AppCheckState = { ...state, activated: true };\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"]},"metadata":{},"sourceType":"module"}
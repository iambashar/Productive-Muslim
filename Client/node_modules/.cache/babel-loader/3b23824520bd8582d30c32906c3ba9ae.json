{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { activate, ensureInitialized, fetchConfig, fetchAndActivate, getAll, getBoolean, getNumber, getString, getValue, setLogLevel, isSupported } from '@firebase/remote-config';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass RemoteConfigCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get defaultConfig() {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis() {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus() {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings() {\n    return this._delegate.settings;\n  }\n\n  set settings(value) {\n    this._delegate.settings = value;\n  }\n\n  activate() {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized() {\n    return ensureInitialized(this._delegate);\n  }\n  /**\r\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n   * {@link Settings.fetchTimeoutInSeconds} or\r\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n   */\n\n\n  fetch() {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate() {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll() {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key) {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key) {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key) {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key) {\n    return getValue(this._delegate, key);\n  } // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n\n\n  setLogLevel(logLevel) {\n    setLogLevel(this._delegate, logLevel);\n  }\n\n}\n\nconst name = \"@firebase/remote-config-compat\";\nconst version = \"0.1.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction registerRemoteConfigCompat(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true).setServiceProps({\n    isSupported\n  }));\n  firebaseInstance.registerVersion(name, version);\n}\n\nfunction remoteConfigFactory(container, _ref) {\n  let {\n    instanceIdentifier: namespace\n  } = _ref;\n  const app = container.getProvider('app-compat').getImmediate(); // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase);","map":{"version":3,"sources":["../src/remoteConfig.ts","../src/index.ts"],"names":["packageName"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;MA0Ca,sB,CAAsB;AAGjC,EAAA,WAAA,CAAmB,GAAnB,EAA8C,SAA9C,EAAqE;AAAlD,SAAA,GAAA,GAAA,GAAA;AAA2B,SAAA,SAAA,GAAA,SAAA;AAA2B;;AAExD,MAAb,aAAa,GAAA;AACf,WAAO,KAAK,SAAL,CAAe,aAAtB;AACD;;AAEgB,MAAb,aAAa,CAAC,KAAD,EAAoD;AACnE,SAAK,SAAL,CAAe,aAAf,GAA+B,KAA/B;AACD;;AAEkB,MAAf,eAAe,GAAA;AACjB,WAAO,KAAK,SAAL,CAAe,eAAtB;AACD;;AAEkB,MAAf,eAAe,GAAA;AACjB,WAAO,KAAK,SAAL,CAAe,eAAtB;AACD;;AAEW,MAAR,QAAQ,GAAA;AACV,WAAO,KAAK,SAAL,CAAe,QAAtB;AACD;;AAEW,MAAR,QAAQ,CAAC,KAAD,EAAsB;AAChC,SAAK,SAAL,CAAe,QAAf,GAA0B,KAA1B;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,QAAQ,CAAC,KAAK,SAAN,CAAf;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,WAAO,iBAAiB,CAAC,KAAK,SAAN,CAAxB;AACD;;;;;;;;AAOD,EAAA,KAAK,GAAA;AACH,WAAO,WAAW,CAAC,KAAK,SAAN,CAAlB;AACD;;AAED,EAAA,gBAAgB,GAAA;AACd,WAAO,gBAAgB,CAAC,KAAK,SAAN,CAAvB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,MAAM,CAAC,KAAK,SAAN,CAAb;AACD;;AAED,EAAA,UAAU,CAAC,GAAD,EAAY;AACpB,WAAO,UAAU,CAAC,KAAK,SAAN,EAAiB,GAAjB,CAAjB;AACD;;AAED,EAAA,SAAS,CAAC,GAAD,EAAY;AACnB,WAAO,SAAS,CAAC,KAAK,SAAN,EAAiB,GAAjB,CAAhB;AACD;;AAED,EAAA,SAAS,CAAC,GAAD,EAAY;AACnB,WAAO,SAAS,CAAC,KAAK,SAAN,EAAiB,GAAjB,CAAhB;AACD;;AAED,EAAA,QAAQ,CAAC,GAAD,EAAY;AAClB,WAAO,QAAQ,CAAC,KAAK,SAAN,EAAiB,GAAjB,CAAf;AACD,GApEgC,C;;;;AAwEjC,EAAA,WAAW,CAAC,QAAD,EAA+B;AACxC,IAAA,WAAW,CAAC,KAAK,SAAN,EAAiB,QAAjB,CAAX;AACD;;AA1EgC;;;;AC1CnC;;;;;;;;;;;;;;;;;AA4BA,SAAS,0BAAT,CACE,gBADF,EACsC;AAEpC,EAAA,gBAAgB,CAAC,QAAjB,CAA0B,iBAA1B,CACE,IAAI,SAAJ,CACE,qBADF,EAEE,mBAFF,EAEqB;AAAA;AAFrB,IAKG,oBALH,CAKwB,IALxB,EAMG,eANH,CAMmB;AAAE,IAAA;AAAF,GANnB,CADF;AAUA,EAAA,gBAAgB,CAAC,eAAjB,CAAiCA,IAAjC,EAA8C,OAA9C;AACD;;AAED,SAAS,mBAAT,CACE,SADF,QAE2D;AAAA,MAAzD;AAAE,IAAA,kBAAkB,EAAE;AAAtB,GAAyD;AAEzD,QAAM,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,YAApC,EAAZ,CAFyD,C;;AAIzD,QAAM,YAAY,GAAG,SAAS,CAAC,WAAV,CAAsB,eAAtB,EAAuC,YAAvC,CAAoD;AACvE,IAAA,UAAU,EAAE;AAD2D,GAApD,CAArB;AAIA,SAAO,IAAI,sBAAJ,CAA2B,GAA3B,EAAgC,YAAhC,CAAP;AACD;;AAED,0BAA0B,CAAC,QAAD,CAA1B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport {\n  Value as ValueCompat,\n  FetchStatus as FetchSTatusCompat,\n  Settings as SettingsCompat,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig as RemoteConfigCompat\n} from '@firebase/remote-config-types';\nimport {\n  RemoteConfig,\n  setLogLevel,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  isSupported\n} from '@firebase/remote-config';\n\nexport { isSupported };\n\nexport class RemoteConfigCompatImpl\n  implements RemoteConfigCompat, _FirebaseService\n{\n  constructor(public app: FirebaseApp, readonly _delegate: RemoteConfig) {}\n\n  get defaultConfig(): { [key: string]: string | number | boolean } {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value: { [key: string]: string | number | boolean }) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis(): number {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus(): FetchSTatusCompat {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings(): SettingsCompat {\n    return this._delegate.settings;\n  }\n\n  set settings(value: SettingsCompat) {\n    this._delegate.settings = value;\n  }\n\n  activate(): Promise<boolean> {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized(): Promise<void> {\n    return ensureInitialized(this._delegate);\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  fetch(): Promise<void> {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate(): Promise<boolean> {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll(): { [key: string]: ValueCompat } {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key: string): boolean {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key: string): number {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key: string): string {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key: string): ValueCompat {\n    return getValue(this._delegate, key);\n  }\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    setLogLevel(this._delegate, logLevel);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { RemoteConfigCompatImpl, isSupported } from './remoteConfig';\nimport { name as packageName, version } from '../package.json';\nimport { RemoteConfig as RemoteConfigCompat } from '@firebase/remote-config-types';\n\nfunction registerRemoteConfigCompat(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig-compat',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    )\n      .setMultipleInstances(true)\n      .setServiceProps({ isSupported })\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction remoteConfigFactory(\n  container: ComponentContainer,\n  { instanceIdentifier: namespace }: InstanceFactoryOptions\n): RemoteConfigCompatImpl {\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    remoteConfig: {\n      (app?: FirebaseApp): RemoteConfigCompat;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
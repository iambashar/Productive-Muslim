{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { ReCaptchaV3Provider, CustomProvider, initializeAppCheck, setTokenAutoRefreshEnabled, getToken, onTokenChanged } from '@firebase/app-check';\nimport { ErrorFactory } from '@firebase/util';\nconst name = \"@firebase/app-check-compat\";\nconst version = \"0.1.3\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERRORS = {\n  [\"use-before-activation\"\n  /* USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before activate() is called for FirebaseApp {$appName}. ' + 'Call activate() before instantiating other Firebase services.'\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass AppCheckService {\n  constructor(app) {\n    this.app = app;\n  }\n\n  activate(siteKeyOrProvider, isTokenAutoRefreshEnabled) {\n    let provider;\n\n    if (typeof siteKeyOrProvider === 'string') {\n      provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n    } else if (siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {\n      provider = siteKeyOrProvider;\n    } else {\n      provider = new CustomProvider({\n        getToken: siteKeyOrProvider.getToken\n      });\n    }\n\n    this._delegate = initializeAppCheck(this.app, {\n      provider,\n      isTokenAutoRefreshEnabled\n    });\n  }\n\n  setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled) {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: this.app.name\n      });\n    }\n\n    setTokenAutoRefreshEnabled(this._delegate, isTokenAutoRefreshEnabled);\n  }\n\n  getToken(forceRefresh) {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: this.app.name\n      });\n    }\n\n    return getToken(this._delegate, forceRefresh);\n  }\n\n  onTokenChanged(onNextOrObserver, onError, onCompletion) {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(\"use-before-activation\"\n      /* USE_BEFORE_ACTIVATION */\n      , {\n        appName: this.app.name\n      });\n    }\n\n    return onTokenChanged(this._delegate,\n    /**\r\n     * Exp onTokenChanged() will handle both overloads but we need\r\n     * to specify one to not confuse Typescript.\r\n     */\n    onNextOrObserver, onError, onCompletion);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst factory = container => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  return new AppCheckService(app);\n};\n\nfunction registerAppCheck() {\n  firebase.INTERNAL.registerComponent(new Component('appCheck-compat', factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ReCaptchaV3Provider,\n    CustomProvider\n  }));\n}\n\nregisterAppCheck();\nfirebase.registerVersion(name, version);\nexport { registerAppCheck };","map":{"version":3,"sources":["../src/errors.ts","../src/service.ts","../src/index.ts"],"names":["setTokenAutoRefreshEnabledExp","getTokenExp","onTokenChangedExp"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAuBA,MAAM,MAAM,GAA4B;AACtC,GAAA;AAAA;AAAA,KACE,qFACA;AAHoC,CAAxC;AAUO,MAAM,aAAa,GAAG,IAAI,YAAJ,CAC3B,UAD2B,EAE3B,UAF2B,EAG3B,MAH2B,CAAtB;ACjCP;;;;;;;;;;;;;;;;;MAmCa,e,CAAe;AAI1B,EAAA,WAAA,CAAmB,GAAnB,EAAmC;AAAhB,SAAA,GAAA,GAAA,GAAA;AAAoB;;AAEvC,EAAA,QAAQ,CACN,iBADM,EAEN,yBAFM,EAE6B;AAEnC,QAAI,QAAJ;;AACA,QAAI,OAAO,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,MAAA,QAAQ,GAAG,IAAI,mBAAJ,CAAwB,iBAAxB,CAAX;AACD,KAFD,MAEO,IACL,iBAAiB,YAAY,mBAA7B,IACA,iBAAiB,YAAY,cAFxB,EAGL;AACA,MAAA,QAAQ,GAAG,iBAAX;AACD,KALM,MAKA;AACL,MAAA,QAAQ,GAAG,IAAI,cAAJ,CAAmB;AAAE,QAAA,QAAQ,EAAE,iBAAiB,CAAC;AAA9B,OAAnB,CAAX;AACD;;AACD,SAAK,SAAL,GAAiB,kBAAkB,CAAC,KAAK,GAAN,EAAW;AAC5C,MAAA,QAD4C;AAE5C,MAAA;AAF4C,KAAX,CAAnC;AAID;;AAED,EAAA,0BAA0B,CAAC,yBAAD,EAAmC;AAC3D,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAA0D;AAC9D,QAAA,OAAO,EAAE,KAAK,GAAL,CAAS;AAD4C,OAA1D,CAAN;AAGD;;AACDA,IAAAA,0BAA6B,CAAC,KAAK,SAAN,EAAiB,yBAAjB,CAA7BA;AACD;;AAED,EAAA,QAAQ,CAAC,YAAD,EAAuB;AAC7B,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAA0D;AAC9D,QAAA,OAAO,EAAE,KAAK,GAAL,CAAS;AAD4C,OAA1D,CAAN;AAGD;;AACD,WAAOC,QAAW,CAAC,KAAK,SAAN,EAAiB,YAAjB,CAAlB;AACD;;AAED,EAAA,cAAc,CACZ,gBADY,EAIZ,OAJY,EAKZ,YALY,EAKa;AAEzB,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAA0D;AAC9D,QAAA,OAAO,EAAE,KAAK,GAAL,CAAS;AAD4C,OAA1D,CAAN;AAGD;;AACD,WAAOC,cAAiB,CACtB,KAAK,SADiB;;;;;AAMtB,IAAA,gBANsB,EAOtB,OAPsB,EAQtB,YARsB,CAAxB;AAUD;;AAnEyB;ACnC5B;;;;;;;;;;;;;;;;;;AAgCA,MAAM,OAAO,GACX,SADkD,IACrB;;AAG7B,QAAM,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,YAApC,EAAZ;AAEA,SAAO,IAAI,eAAJ,CAAoB,GAApB,CAAP;AACD,CAPD;;SASgB,gB,GAAgB;AAC7B,EAAA,QAA+B,CAAC,QAAhC,CAAyC,iBAAzC,CACC,IAAI,SAAJ,CACE,iBADF,EAEE,OAFF,EAES;AAAA;AAFT,IAIE,eAJF,CAIkB;AAChB,IAAA,mBADgB;AAEhB,IAAA;AAFgB,GAJlB,CADD;AAUF;;AAED,gBAAgB;AAChB,QAAQ,CAAC,eAAT,CAAyB,IAAzB,EAA+B,OAA/B","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  USE_BEFORE_ACTIVATION = 'use-before-activation'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Call activate() before instantiating other Firebase services.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult,\n  FirebaseAppCheck\n} from '@firebase/app-check-types';\nimport { _FirebaseService, FirebaseApp } from '@firebase/app-compat';\nimport {\n  AppCheck as AppCheckServiceExp,\n  CustomProvider,\n  initializeAppCheck,\n  ReCaptchaV3Provider,\n  setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabledExp,\n  getToken as getTokenExp,\n  onTokenChanged as onTokenChangedExp\n} from '@firebase/app-check';\nimport { PartialObserver, Unsubscribe } from '@firebase/util';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\n\nexport class AppCheckService\n  implements FirebaseAppCheck, Omit<_FirebaseService, '_delegate'>\n{\n  _delegate?: AppCheckServiceExp;\n  constructor(public app: FirebaseApp) {}\n\n  activate(\n    siteKeyOrProvider: string | AppCheckProvider,\n    isTokenAutoRefreshEnabled?: boolean\n  ): void {\n    let provider: ReCaptchaV3Provider | CustomProvider;\n    if (typeof siteKeyOrProvider === 'string') {\n      provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n    } else if (\n      siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n      siteKeyOrProvider instanceof CustomProvider\n    ) {\n      provider = siteKeyOrProvider;\n    } else {\n      provider = new CustomProvider({ getToken: siteKeyOrProvider.getToken });\n    }\n    this._delegate = initializeAppCheck(this.app, {\n      provider,\n      isTokenAutoRefreshEnabled\n    });\n  }\n\n  setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled: boolean): void {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    setTokenAutoRefreshEnabledExp(this._delegate, isTokenAutoRefreshEnabled);\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    return getTokenExp(this._delegate, forceRefresh);\n  }\n\n  onTokenChanged(\n    onNextOrObserver:\n      | PartialObserver<AppCheckTokenResult>\n      | ((tokenResult: AppCheckTokenResult) => void),\n    onError?: (error: Error) => void,\n    onCompletion?: () => void\n  ): Unsubscribe {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    return onTokenChangedExp(\n      this._delegate,\n      /**\n       * Exp onTokenChanged() will handle both overloads but we need\n       * to specify one to not confuse Typescript.\n       */\n      onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n      onError,\n      onCompletion\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, {\n  _FirebaseNamespace,\n  FirebaseApp\n} from '@firebase/app-compat';\nimport { name, version } from '../package.json';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { AppCheckService } from './service';\nimport { FirebaseAppCheck } from '@firebase/app-check-types';\nimport { ReCaptchaV3Provider, CustomProvider } from '@firebase/app-check';\n\nconst factory: InstanceFactory<'appCheck-compat'> = (\n  container: ComponentContainer\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n\n  return new AppCheckService(app as FirebaseApp);\n};\n\nexport function registerAppCheck(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'appCheck-compat',\n      factory,\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      ReCaptchaV3Provider,\n      CustomProvider\n    })\n  );\n}\n\nregisterAppCheck();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerAppCheck`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
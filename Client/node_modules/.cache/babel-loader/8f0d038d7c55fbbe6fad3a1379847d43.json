{"ast":null,"code":"import { _registerComponent, registerVersion, getApp, _getProvider } from '@firebase/app';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  const result = {};\n\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\n\n\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n\n  if (data === true || data === false) {\n    return data;\n  }\n\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, x => encode(x));\n  } // If we got this far, the data is not encodable.\n\n\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\n\n\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number(json['value']);\n\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n\n          return value;\n        }\n\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, x => decode(x));\n  } // Anything else is safe to return.\n\n\n  return json;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Functions.\r\n */\n\n\nconst FUNCTIONS_TYPE = 'functions';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\n\nconst errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\n\nclass FunctionsError extends FirebaseError {\n  constructor(\n  /**\r\n   * A standard error code that will be returned to the client. This also\r\n   * determines the HTTP status code of the response, as defined in code.proto.\r\n   */\n  code, message,\n  /**\r\n   * Extra data to be converted to JSON and included in the error response.\r\n   */\n  details) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n    this.details = details;\n  }\n\n}\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\n\n\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n\n    case 400:\n      return 'invalid-argument';\n\n    case 401:\n      return 'unauthenticated';\n\n    case 403:\n      return 'permission-denied';\n\n    case 404:\n      return 'not-found';\n\n    case 409:\n      return 'aborted';\n\n    case 429:\n      return 'resource-exhausted';\n\n    case 499:\n      return 'cancelled';\n\n    case 500:\n      return 'internal';\n\n    case 501:\n      return 'unimplemented';\n\n    case 503:\n      return 'unavailable';\n\n    case 504:\n      return 'deadline-exceeded';\n  }\n\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\n\n\nfunction _errorForResponse(status, bodyJSON) {\n  let code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.\n\n  let description = code;\n  let details = undefined; // Then look through the body for explicit details.\n\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n\n    if (errorJSON) {\n      const status = errorJSON.status;\n\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n\n        code = errorCodeMap[status]; // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n\n        description = status;\n      }\n\n      const message = errorJSON.message;\n\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {// If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\n\n\nclass ContextProvider {\n  constructor(authProvider, messagingProvider, appCheckProvider) {\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(auth => this.auth = auth, () => {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(messaging => this.messaging = messaging, () => {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(appCheck => this.appCheck = appCheck, () => {\n        /* get() never rejects */\n      });\n    }\n  }\n\n  async getAuthToken() {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      return token === null || token === void 0 ? void 0 : token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getMessagingToken() {\n    if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getAppCheckToken() {\n    if (this.appCheck) {\n      const result = await this.appCheck.getToken();\n\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n\n      return result.token;\n    }\n\n    return null;\n  }\n\n  async getContext() {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken();\n    return {\n      authToken,\n      messagingToken,\n      appCheckToken\n    };\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_REGION = 'us-central1';\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\n\nfunction failAfter(millis) {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\n\n\nclass FunctionsService {\n  /**\r\n   * Creates a new Functions service for the given app.\r\n   * @param app - The FirebaseApp to use.\r\n   */\n  constructor(app, authProvider, messagingProvider, appCheckProvider) {\n    let regionOrCustomDomain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_REGION;\n    let fetchImpl = arguments.length > 5 ? arguments[5] : undefined;\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider); // Cancels all ongoing requests when resolved.\n\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    }); // Resolve the region or custom domain overload by attempting to parse it.\n\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete() {\n    return this.deleteService();\n  }\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name - The name of the callable.\r\n   * @internal\r\n   */\n\n\n  _url(name) {\n    const projectId = this.app.options.projectId;\n\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable$1(functionsInstance, name, options) {\n  return data => {\n    return call(functionsInstance, name, data, options || {});\n  };\n}\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\n\n\nasync function postJSON(url, body, headers, fetchImpl) {\n  headers['Content-Type'] = 'application/json';\n  let response;\n\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n\n  let json = null;\n\n  try {\n    json = await response.json();\n  } catch (e) {// If we fail to parse JSON, it will fail the same as an empty body.\n  }\n\n  return {\n    status: response.status,\n    json\n  };\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\n\n\nasync function call(functionsInstance, name, data, options) {\n  const url = functionsInstance._url(name); // Encode any special types, such as dates, in the input data.\n\n\n  data = encode(data);\n  const body = {\n    data\n  }; // Add a header for the authToken.\n\n  const headers = {};\n  const context = await functionsInstance.contextProvider.getContext();\n\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  } // Default timeout to 70s, but let the options override it.\n\n\n  const timeout = options.timeout || 70000;\n  const response = await Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfter(timeout), functionsInstance.cancelAllRequests]); // If service was deleted, interrupted response throws an error.\n\n  if (!response) {\n    throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n  } // Check for an error status, regardless of http status.\n\n\n  const error = _errorForResponse(response.status, response.json);\n\n  if (error) {\n    throw error;\n  }\n\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n\n  let responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  } // Decode any special types, such as dates, in the returned data.\n\n\n  const decodedData = decode(responseData);\n  return {\n    data: decodedData\n  };\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.7.3\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst AUTH_INTERNAL_NAME = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\n\nfunction registerFunctions(fetchImpl, variant) {\n  const factory = (container, _ref) => {\n    let {\n      instanceIdentifier: regionOrCustomDomain\n    } = _ref;\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  };\n\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\n\n\nfunction getFunctions() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let regionOrCustomDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_REGION;\n\n  // Dependencies\n  const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  return functionsInstance;\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterFunctions(fetch.bind(self));\nexport { connectFunctionsEmulator, getFunctions, httpsCallable };","map":{"version":3,"sources":["../src/serializer.ts","../src/constants.ts","../src/error.ts","../src/context.ts","../src/service.ts","../src/config.ts","../src/api.ts","../src/index.ts"],"names":["connectFunctionsEmulator","httpsCallable","_connectFunctionsEmulator","_httpsCallable"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\n/**\n * Takes data and encodes it in a JSON-friendly way, such that types such as\n * Date are preserved.\n * @internal\n * @param data - Data to encode.\n */\nexport function encode(data: unknown): unknown {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data!, x => encode(x));\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n\n/**\n * Takes data that's been encoded in a JSON-friendly form and returns a form\n * with richer datatypes, such as Dates, etc.\n * @internal\n * @param json - JSON to convert.\n */\nexport function decode(json: unknown): unknown {\n  if (json == null) {\n    return json;\n  }\n  if ((json as { [key: string]: unknown })['@type']) {\n    switch ((json as { [key: string]: unknown })['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE: {\n        // Technically, this could work return a valid number for malformed\n        // data if there was a number followed by garbage. But it's just not\n        // worth all the extra code to detect that case.\n        const value = Number((json as { [key: string]: unknown })['value']);\n        if (isNaN(value)) {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n        return value;\n      }\n      default: {\n        throw new Error('Data cannot be decoded from JSON: ' + json);\n      }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json!, x => decode(x));\n  }\n  // Anything else is safe to return.\n  return json;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Functions.\n */\nexport const FUNCTIONS_TYPE = 'functions';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FunctionsErrorCode } from './public-types';\nimport { decode } from './serializer';\nimport { HttpResponseBody } from './service';\nimport { FirebaseError } from '@firebase/util';\nimport { FUNCTIONS_TYPE } from './constants';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class FunctionsError extends FirebaseError {\n  constructor(\n    /**\n     * A standard error code that will be returned to the client. This also\n     * determines the HTTP status code of the response, as defined in code.proto.\n     */\n    code: FunctionsErrorCode,\n    message?: string,\n    /**\n     * Extra data to be converted to JSON and included in the error response.\n     */\n    readonly details?: unknown\n  ) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from '@firebase/component';\nimport {\n  AppCheckInternalComponentName,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport {\n  MessagingInternal,\n  MessagingInternalComponentName\n} from '@firebase/messaging-interop-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n\n/**\n * The metadata that should be supplied with function calls.\n * @internal\n */\nexport interface Context {\n  authToken?: string;\n  messagingToken?: string;\n  appCheckToken: string | null;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n * @internal\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: MessagingInternal | null = null;\n  private appCheck: FirebaseAppCheckInternal | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(\n        appCheck => (this.appCheck = appCheck),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      return token?.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getMessagingToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getAppCheckToken(): Promise<string | null> {\n    if (this.appCheck) {\n      const result = await this.appCheck.getToken();\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n      return result.token;\n    }\n    return null;\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken();\n    return { authToken, messagingToken, appCheckToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport {\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from './public-types';\nimport { _errorForResponse, FunctionsError } from './error';\nimport { ContextProvider } from './context';\nimport { encode, decode } from './serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\nexport const DEFAULT_REGION = 'us-central1';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type FunctionsError.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(millis: number): Promise<never> {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n * @internal\n */\nexport class FunctionsService implements _FirebaseService {\n  readonly contextProvider: ContextProvider;\n  emulatorOrigin: string | null = null;\n  cancelAllRequests: Promise<void>;\n  deleteService!: () => Promise<void>;\n  region: string;\n  customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app.\n   * @param app - The FirebaseApp to use.\n   */\n  constructor(\n    readonly app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain: string = DEFAULT_REGION,\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(\n      authProvider,\n      messagingProvider,\n      appCheckProvider\n    );\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete(): Promise<void> {\n    return this.deleteService();\n  }\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name - The name of the callable.\n   * @internal\n   */\n  _url(name: string): string {\n    const projectId = this.app.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host The emulator host (ex: localhost)\n * @param port The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: FunctionsService,\n  host: string,\n  port: number\n): void {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n\n/**\n * Returns a reference to the callable https trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData, ResponseData>(\n  functionsInstance: FunctionsService,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return (data => {\n    return call(functionsInstance, name, data, options || {});\n  }) as HttpsCallable<RequestData, ResponseData>;\n}\n\n/**\n * Does an HTTP POST and returns the completed response.\n * @param url The url to post to.\n * @param body The JSON body of the post.\n * @param headers The HTTP headers to include in the request.\n * @return A Promise that will succeed when the request finishes.\n */\nasync function postJSON(\n  url: string,\n  body: unknown,\n  headers: { [key: string]: string },\n  fetchImpl: typeof fetch\n): Promise<HttpResponse> {\n  headers['Content-Type'] = 'application/json';\n\n  let response: Response;\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n  let json: HttpResponseBody | null = null;\n  try {\n    json = await response.json();\n  } catch (e) {\n    // If we fail to parse JSON, it will fail the same as an empty body.\n  }\n  return {\n    status: response.status,\n    json\n  };\n}\n\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.s\n */\nasync function call(\n  functionsInstance: FunctionsService,\n  name: string,\n  data: unknown,\n  options: HttpsCallableOptions\n): Promise<HttpsCallableResult> {\n  const url = functionsInstance._url(name);\n\n  // Encode any special types, such as dates, in the input data.\n  data = encode(data);\n  const body = { data };\n\n  // Add a header for the authToken.\n  const headers: { [key: string]: string } = {};\n  const context = await functionsInstance.contextProvider.getContext();\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  }\n\n  // Default timeout to 70s, but let the options override it.\n  const timeout = options.timeout || 70000;\n\n  const response = await Promise.race([\n    postJSON(url, body, headers, functionsInstance.fetchImpl),\n    failAfter(timeout),\n    functionsInstance.cancelAllRequests\n  ]);\n\n  // If service was deleted, interrupted response throws an error.\n  if (!response) {\n    throw new FunctionsError(\n      'cancelled',\n      'Firebase Functions instance was deleted.'\n    );\n  }\n\n  // Check for an error status, regardless of http status.\n  const error = _errorForResponse(response.status, response.json);\n  if (error) {\n    throw error;\n  }\n\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n\n  let responseData = response.json.data;\n  // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  }\n\n  // Decode any special types, such as dates, in the returned data.\n  const decodedData = decode(responseData);\n\n  return { data: decodedData };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactory\n} from '@firebase/component';\nimport { FUNCTIONS_TYPE } from './constants';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { name, version } from '../package.json';\n\nconst AUTH_INTERNAL_NAME: FirebaseAuthInternalName = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME: AppCheckInternalComponentName =\n  'app-check-internal';\nconst MESSAGING_INTERNAL_NAME: MessagingInternalComponentName =\n  'messaging-internal';\n\nexport function registerFunctions(\n  fetchImpl: typeof fetch,\n  variant?: string\n): void {\n  const factory: InstanceFactory<'functions'> = (\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }\n  ) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  };\n\n  _registerComponent(\n    new Component(\n      FUNCTIONS_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport { FUNCTIONS_TYPE } from './constants';\n\nimport { Provider } from '@firebase/component';\nimport { Functions, HttpsCallableOptions, HttpsCallable } from './public-types';\nimport {\n  FunctionsService,\n  DEFAULT_REGION,\n  connectFunctionsEmulator as _connectFunctionsEmulator,\n  httpsCallable as _httpsCallable\n} from './service';\nimport { getModularInstance } from '@firebase/util';\n\nexport * from './public-types';\n\n/**\n * Returns a {@link Functions} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param regionOrCustomDomain - one of:\n *   a) The region the callable functions are located in (ex: us-central1)\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\n * @public\n */\nexport function getFunctions(\n  app: FirebaseApp = getApp(),\n  regionOrCustomDomain: string = DEFAULT_REGION\n): Functions {\n  // Dependencies\n  const functionsProvider: Provider<'functions'> = _getProvider(\n    getModularInstance(app),\n    FUNCTIONS_TYPE\n  );\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  return functionsInstance;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: Functions,\n  host: string,\n  port: number\n): void {\n  _connectFunctionsEmulator(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    host,\n    port\n  );\n}\n\n/**\n * Returns a reference to the callable HTTPS trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData = unknown, ResponseData = unknown>(\n  functionsInstance: Functions,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return _httpsCallable<RequestData, ResponseData>(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    name,\n    options\n  );\n}\n","/**\n * Cloud Functions for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerFunctions } from './config';\n\nexport * from './api';\n\nregisterFunctions(fetch.bind(self));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { httpsCallable, connectFunctionsEmulator } from '@firebase/functions';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/functions-compat\";\nconst version = \"0.1.4\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FunctionsService {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n\n  httpsCallable(name, options) {\n    return httpsCallable(this._delegate, name, options);\n  }\n  /**\r\n   * Deprecated in pre-modularized repo, does not exist in modularized\r\n   * functions package, need to convert to \"host\" and \"port\" args that\r\n   * `useFunctionsEmulatorExp` takes.\r\n   * @deprecated\r\n   */\n\n\n  useFunctionsEmulator(origin) {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n\n    if (match == null) {\n      throw new FirebaseError('functions', 'No origin provided to useFunctionsEmulator()');\n    }\n\n    if (match[2] == null) {\n      throw new FirebaseError('functions', 'Port missing in origin provided to useFunctionsEmulator()');\n    }\n\n    return connectFunctionsEmulator(this._delegate, match[1], Number(match[2]));\n  }\n\n  useEmulator(host, port) {\n    return connectFunctionsEmulator(this._delegate, host, port);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_REGION = 'us-central1';\n\nconst factory = (container, _ref) => {\n  let {\n    instanceIdentifier: regionOrCustomDomain\n  } = _ref;\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain !== null && regionOrCustomDomain !== void 0 ? regionOrCustomDomain : DEFAULT_REGION\n  });\n  return new FunctionsService(app, functionsServiceExp);\n};\n\nfunction registerFunctions() {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  firebase.INTERNAL.registerComponent(new Component('functions-compat', factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterFunctions();\nfirebase.registerVersion(name, version);","map":{"version":3,"sources":["../src/service.ts","../src/register.ts","../src/index.ts"],"names":["httpsCallableExp","useFunctionsEmulatorExp"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;MA2Ba,gB,CAAgB;AAY3B,EAAA,WAAA,CACS,GADT,EAEW,SAFX,EAEyC;AADhC,SAAA,GAAA,GAAA,GAAA;AACE,SAAA,SAAA,GAAA,SAAA;AAET,SAAK,OAAL,GAAe,KAAK,SAAL,CAAe,MAA9B;AACA,SAAK,aAAL,GAAqB,KAAK,SAAL,CAAe,YAApC;AACD;;AACD,EAAA,aAAa,CAAC,IAAD,EAAe,OAAf,EAA6C;AACxD,WAAOA,aAAgB,CAAC,KAAK,SAAN,EAAiB,IAAjB,EAAuB,OAAvB,CAAvB;AACD;;;;;;;;;AAOD,EAAA,oBAAoB,CAAC,MAAD,EAAe;AACjC,UAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,4CAAb,CAAd;;AACA,QAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAM,IAAI,aAAJ,CACJ,WADI,EAEJ,8CAFI,CAAN;AAID;;AACD,QAAI,KAAK,CAAC,CAAD,CAAL,IAAY,IAAhB,EAAsB;AACpB,YAAM,IAAI,aAAJ,CACJ,WADI,EAEJ,2DAFI,CAAN;AAID;;AACD,WAAOC,wBAAuB,CAAC,KAAK,SAAN,EAAiB,KAAK,CAAC,CAAD,CAAtB,EAA2B,MAAM,CAAC,KAAK,CAAC,CAAD,CAAN,CAAjC,CAA9B;AACD;;AACD,EAAA,WAAW,CAAC,IAAD,EAAe,IAAf,EAA2B;AACpC,WAAOA,wBAAuB,CAAC,KAAK,SAAN,EAAiB,IAAjB,EAAuB,IAAvB,CAA9B;AACD;;AA9C0B;AC3B7B;;;;;;;;;;;;;;;;;;AA2BA,MAAM,cAAc,GAAG,aAAvB;;AAEA,MAAM,OAAO,GAAwC,CACnD,SADmD,WAEiB;AAAA,MAApE;AAAE,IAAA,kBAAkB,EAAE;AAAtB,GAAoE;;AAGpE,QAAM,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,YAApC,EAAZ;AACA,QAAM,mBAAmB,GAAG,SAAS,CAAC,WAAV,CAAsB,WAAtB,EAAmC,YAAnC,CAAgD;AAC1E,IAAA,UAAU,EAAE,oBAAoB,KAAA,IAApB,IAAA,oBAAoB,KAAA,KAAA,CAApB,GAAA,oBAAA,GAAwB;AADsC,GAAhD,CAA5B;AAIA,SAAO,IAAI,gBAAJ,CAAqB,GAArB,EAA0B,mBAA1B,CAAP;AACD,CAXD;;SAagB,iB,GAAiB;AAC/B,QAAM,gBAAgB,GAAG;AACvB,IAAA,SAAS,EAAE;AADY,GAAzB;AAGC,EAAA,QAA+B,CAAC,QAAhC,CAAyC,iBAAzC,CACC,IAAI,SAAJ,CAAc,kBAAd,EAAkC,OAAlC,EAAyC;AAAA;AAAzC,IACG,eADH,CACmB,gBADnB,EAEG,oBAFH,CAEwB,IAFxB,CADD;AAKH;ACnDA;;;;;;;;;;;;;;;;;;AAsBA,iBAAiB;AACjB,QAAQ,CAAC,eAAT,CAAyB,IAAzB,EAA+B,OAA/B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseFunctions, HttpsCallable } from '@firebase/functions-types';\nimport {\n  httpsCallable as httpsCallableExp,\n  connectFunctionsEmulator as useFunctionsEmulatorExp,\n  HttpsCallableOptions,\n  Functions as FunctionsServiceExp\n} from '@firebase/functions';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport { FirebaseError } from '@firebase/util';\n\nexport class FunctionsService implements FirebaseFunctions, _FirebaseService {\n  /**\n   * For testing.\n   * @internal\n   */\n  _region: string;\n  /**\n   * For testing.\n   * @internal\n   */\n  _customDomain: string | null;\n\n  constructor(\n    public app: FirebaseApp,\n    readonly _delegate: FunctionsServiceExp\n  ) {\n    this._region = this._delegate.region;\n    this._customDomain = this._delegate.customDomain;\n  }\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return httpsCallableExp(this._delegate, name, options);\n  }\n  /**\n   * Deprecated in pre-modularized repo, does not exist in modularized\n   * functions package, need to convert to \"host\" and \"port\" args that\n   * `useFunctionsEmulatorExp` takes.\n   * @deprecated\n   */\n  useFunctionsEmulator(origin: string): void {\n    const match = origin.match('[a-zA-Z]+://([a-zA-Z0-9.-]+)(?::([0-9]+))?');\n    if (match == null) {\n      throw new FirebaseError(\n        'functions',\n        'No origin provided to useFunctionsEmulator()'\n      );\n    }\n    if (match[2] == null) {\n      throw new FirebaseError(\n        'functions',\n        'Port missing in origin provided to useFunctionsEmulator()'\n      );\n    }\n    return useFunctionsEmulatorExp(this._delegate, match[1], Number(match[2]));\n  }\n  useEmulator(host: string, port: number): void {\n    return useFunctionsEmulatorExp(this._delegate, host, port);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nconst DEFAULT_REGION = 'us-central1';\n\nconst factory: InstanceFactory<'functions-compat'> = (\n  container: ComponentContainer,\n  { instanceIdentifier: regionOrCustomDomain }: InstanceFactoryOptions\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const functionsServiceExp = container.getProvider('functions').getImmediate({\n    identifier: regionOrCustomDomain ?? DEFAULT_REGION\n  });\n\n  return new FunctionsService(app, functionsServiceExp);\n};\n\nexport function registerFunctions(): void {\n  const namespaceExports = {\n    Functions: FunctionsService\n  };\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component('functions-compat', factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app-compat';\nimport { name, version } from '../package.json';\nimport { registerFunctions } from './register';\nimport * as types from '@firebase/functions-types';\n\nregisterFunctions();\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    functions: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
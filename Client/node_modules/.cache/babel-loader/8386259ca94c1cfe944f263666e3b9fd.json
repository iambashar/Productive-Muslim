{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { getToken, deleteToken, onMessage } from '@firebase/messaging';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\nconst name = \"@firebase/messaging-compat\";\nconst version = \"0.1.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n */\n\n\nfunction isWindowSupported() {\n  return typeof window !== 'undefined' && isIndexedDBAvailable() && areCookiesEnabled() && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\n\n\nfunction isSwSupported() {\n  return isIndexedDBAvailable() && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n\nclass MessagingCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options) {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken() {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(nextOrObserver) {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(nextOrObserver) {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst messagingCompatFactory = container => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());\n  } else {\n    // in window\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nfunction registerMessagingCompat() {\n  firebase.INTERNAL.registerComponent(new Component('messaging-compat', messagingCompatFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(NAMESPACE_EXPORTS));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);","map":{"version":3,"sources":["../src/messaging-compat.ts","../src/registerMessagingCompat.ts","../src/index.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;SAuDgB,W,GAAW;AACzB,MAAI,IAAI,IAAI,8BAA8B,IAA1C,EAAgD;;AAE9C,WAAO,aAAa,EAApB;AACD,GAHD,MAGO;;AAEL,WAAO,iBAAiB,EAAxB;AACD;AACF;AAED;;;;;AAGA,SAAS,iBAAT,GAA0B;AACxB,SACE,OAAO,MAAP,KAAkB,WAAlB,IACA,oBAAoB,EADpB,IAEA,iBAAiB,EAFjB,IAGA,mBAAmB,SAHnB,IAIA,iBAAiB,MAJjB,IAKA,kBAAkB,MALlB,IAMA,WAAW,MANX,IAOA,yBAAyB,CAAC,SAA1B,CAAoC,cAApC,CAAmD,kBAAnD,CAPA,IAQA,gBAAgB,CAAC,SAAjB,CAA2B,cAA3B,CAA0C,QAA1C,CATF;AAWD;AAED;;;;;AAGA,SAAS,aAAT,GAAsB;AACpB,SACE,oBAAoB,MACpB,iBAAiB,IADjB,IAEA,kBAAkB,IAFlB,IAGA,yBAAyB,CAAC,SAA1B,CAAoC,cAApC,CAAmD,kBAAnD,CAHA,IAIA,gBAAgB,CAAC,SAAjB,CAA2B,cAA3B,CAA0C,QAA1C,CALF;AAOD;;MAEY,mB,CAAmB;AAC9B,EAAA,WAAA,CAAqB,GAArB,EAA8C,SAA9C,EAAkE;AAA7C,SAAA,GAAA,GAAA,GAAA;AAAyB,SAAA,SAAA,GAAA,SAAA;AAC5C,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAEa,QAAR,QAAQ,CAAC,OAAD,EAGb;AACC,WAAO,QAAQ,CAAC,KAAK,SAAN,EAAiB,OAAjB,CAAf;AACD;;AAEgB,QAAX,WAAW,GAAA;AACf,WAAO,WAAW,CAAC,KAAK,SAAN,CAAlB;AACD;;AAED,EAAA,SAAS,CACP,cADO,EAC0D;AAEjE,WAAO,SAAS,CAAC,KAAK,SAAN,EAAiB,cAAjB,CAAhB;AACD;;AAED,EAAA,mBAAmB,CACjB,cADiB,EACgD;AAEjE,WAAO,mBAAmB,CAAC,KAAK,SAAN,EAAiB,cAAjB,CAA1B;AACD;;AA3B6B;AC/FhC;;;;;;;;;;;;;;;;;;AAgCA,MAAM,sBAAsB,GAC1B,SADkE,IACrC;AAE7B,MAAI,IAAI,IAAI,8BAA8B,IAA1C,EAAgD;;AAE9C,WAAO,IAAI,mBAAJ,CACL,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,YAApC,EADK,EAEL,SAAS,CAAC,WAAV,CAAsB,cAAtB,EAAsC,YAAtC,EAFK,CAAP;AAID,GAND,MAMO;;AAEL,WAAO,IAAI,mBAAJ,CACL,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,YAApC,EADK,EAEL,SAAS,CAAC,WAAV,CAAsB,WAAtB,EAAmC,YAAnC,EAFK,CAAP;AAID;AACF,CAhBD;;AAkBA,MAAM,iBAAiB,GAAG;AACxB,EAAA;AADwB,CAA1B;;SAIgB,uB,GAAuB;AACpC,EAAA,QAA+B,CAAC,QAAhC,CAAyC,iBAAzC,CACC,IAAI,SAAJ,CACE,kBADF,EAEE,sBAFF,EAEwB;AAAA;AAFxB,IAIE,eAJF,CAIkB,iBAJlB,CADD;AAOH;AC9DA;;;;;;;;;;;;;;;;;;AAuBA,uBAAuB;AACvB,QAAQ,CAAC,eAAT,CAAyB,IAAzB,EAA+B,OAA/B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp as AppCompat,\n  _FirebaseService\n} from '@firebase/app-compat';\nimport {\n  Messaging,\n  MessagePayload,\n  deleteToken,\n  getToken,\n  onMessage\n} from '@firebase/messaging';\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '@firebase/util';\n\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\n\nexport interface MessagingCompat {\n  getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string>;\n\n  deleteToken(): Promise<boolean>;\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe;\n}\n\nexport function isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowSupported(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSwSupported(): boolean {\n  return (\n    isIndexedDBAvailable() &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\nexport class MessagingCompatImpl implements MessagingCompat, _FirebaseService {\n  constructor(readonly app: AppCompat, readonly _delegate: Messaging) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    return getToken(this._delegate, options);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    return deleteToken(this._delegate);\n  }\n\n  onMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { MessagingCompatImpl, isSupported } from './messaging-compat';\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-compat': MessagingCompatImpl;\n  }\n}\n\nconst messagingCompatFactory: InstanceFactory<'messaging-compat'> = (\n  container: ComponentContainer\n) => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging-sw').getImmediate()\n    );\n  } else {\n    // in window\n    return new MessagingCompatImpl(\n      container.getProvider('app-compat').getImmediate(),\n      container.getProvider('messaging').getImmediate()\n    );\n  }\n};\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\nexport function registerMessagingCompat(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'messaging-compat',\n      messagingCompatFactory,\n      ComponentType.PUBLIC\n    ).setServiceProps(NAMESPACE_EXPORTS)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name, version } from '../package.json';\n\nimport firebase from '@firebase/app-compat';\nimport { registerMessagingCompat } from './registerMessagingCompat';\nimport { MessagingCompat } from './messaging-compat';\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): MessagingCompat;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): MessagingCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}